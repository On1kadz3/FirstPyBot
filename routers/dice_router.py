import asyncio

from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from filters.for_dice import FilterForDice

dice_router = Router()


class UserStates(StatesGroup):
    WAITING_FOR_VALUE = State()


@dice_router.message(Command("dice"))
async def cmd_dice(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 6 [–¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–ø–∏—à–∏—Ç–µ /cancel]:")
    await state.set_state(UserStates.WAITING_FOR_VALUE)


@dice_router.message(FilterForDice(), UserStates.WAITING_FOR_VALUE)
async def cmd_dice1(message: types.Message, state: FSMContext):
    value = message.text
    data = await message.answer_dice(emoji='üé≤')
    await asyncio.sleep(3.75)
    await message.answer(f'–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ {data.dice.value}')
    if int(value) == data.dice.value:
        await message.answer("–ü–æ–±–µ–¥–∞!")
    else:
        await message.answer("–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!")
    await state.clear()


@dice_router.message(UserStates.WAITING_FOR_VALUE)
async def wrong_num(message: types.Message):
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–≤–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏–ª–æ –æ—Ç 1 –¥–æ 6\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–ø–∏—à–∏—Ç–µ /cancel")
